// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/limiter.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LimiterClient is the client API for Limiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimiterClient interface {
	DetectBruteforce(ctx context.Context, in *DetectBruteforceRequest, opts ...grpc.CallOption) (*DetectBruteforceResponse, error)
	ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*ResetBucketResponse, error)
	WhiteListAddIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error)
	WhiteListRemoveIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error)
	BlackListAddIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error)
	BlackListRemoveIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error)
}

type limiterClient struct {
	cc grpc.ClientConnInterface
}

func NewLimiterClient(cc grpc.ClientConnInterface) LimiterClient {
	return &limiterClient{cc}
}

func (c *limiterClient) DetectBruteforce(ctx context.Context, in *DetectBruteforceRequest, opts ...grpc.CallOption) (*DetectBruteforceResponse, error) {
	out := new(DetectBruteforceResponse)
	err := c.cc.Invoke(ctx, "/api.Limiter/DetectBruteforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*ResetBucketResponse, error) {
	out := new(ResetBucketResponse)
	err := c.cc.Invoke(ctx, "/api.Limiter/ResetBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) WhiteListAddIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error) {
	out := new(ManageAddressResponse)
	err := c.cc.Invoke(ctx, "/api.Limiter/WhiteListAddIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) WhiteListRemoveIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error) {
	out := new(ManageAddressResponse)
	err := c.cc.Invoke(ctx, "/api.Limiter/WhiteListRemoveIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) BlackListAddIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error) {
	out := new(ManageAddressResponse)
	err := c.cc.Invoke(ctx, "/api.Limiter/BlackListAddIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) BlackListRemoveIP(ctx context.Context, in *ManageAddressRequest, opts ...grpc.CallOption) (*ManageAddressResponse, error) {
	out := new(ManageAddressResponse)
	err := c.cc.Invoke(ctx, "/api.Limiter/BlackListRemoveIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimiterServer is the server API for Limiter service.
// All implementations must embed UnimplementedLimiterServer
// for forward compatibility
type LimiterServer interface {
	DetectBruteforce(context.Context, *DetectBruteforceRequest) (*DetectBruteforceResponse, error)
	ResetBucket(context.Context, *ResetBucketRequest) (*ResetBucketResponse, error)
	WhiteListAddIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error)
	WhiteListRemoveIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error)
	BlackListAddIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error)
	BlackListRemoveIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error)
	mustEmbedUnimplementedLimiterServer()
}

// UnimplementedLimiterServer must be embedded to have forward compatible implementations.
type UnimplementedLimiterServer struct {
}

func (UnimplementedLimiterServer) DetectBruteforce(context.Context, *DetectBruteforceRequest) (*DetectBruteforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectBruteforce not implemented")
}
func (UnimplementedLimiterServer) ResetBucket(context.Context, *ResetBucketRequest) (*ResetBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedLimiterServer) WhiteListAddIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListAddIP not implemented")
}
func (UnimplementedLimiterServer) WhiteListRemoveIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListRemoveIP not implemented")
}
func (UnimplementedLimiterServer) BlackListAddIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackListAddIP not implemented")
}
func (UnimplementedLimiterServer) BlackListRemoveIP(context.Context, *ManageAddressRequest) (*ManageAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackListRemoveIP not implemented")
}
func (UnimplementedLimiterServer) mustEmbedUnimplementedLimiterServer() {}

// UnsafeLimiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimiterServer will
// result in compilation errors.
type UnsafeLimiterServer interface {
	mustEmbedUnimplementedLimiterServer()
}

func RegisterLimiterServer(s grpc.ServiceRegistrar, srv LimiterServer) {
	s.RegisterService(&Limiter_ServiceDesc, srv)
}

func _Limiter_DetectBruteforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectBruteforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).DetectBruteforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Limiter/DetectBruteforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).DetectBruteforce(ctx, req.(*DetectBruteforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Limiter/ResetBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).ResetBucket(ctx, req.(*ResetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_WhiteListAddIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).WhiteListAddIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Limiter/WhiteListAddIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).WhiteListAddIP(ctx, req.(*ManageAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_WhiteListRemoveIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).WhiteListRemoveIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Limiter/WhiteListRemoveIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).WhiteListRemoveIP(ctx, req.(*ManageAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_BlackListAddIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).BlackListAddIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Limiter/BlackListAddIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).BlackListAddIP(ctx, req.(*ManageAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_BlackListRemoveIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).BlackListRemoveIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Limiter/BlackListRemoveIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).BlackListRemoveIP(ctx, req.(*ManageAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Limiter_ServiceDesc is the grpc.ServiceDesc for Limiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Limiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Limiter",
	HandlerType: (*LimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectBruteforce",
			Handler:    _Limiter_DetectBruteforce_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _Limiter_ResetBucket_Handler,
		},
		{
			MethodName: "WhiteListAddIP",
			Handler:    _Limiter_WhiteListAddIP_Handler,
		},
		{
			MethodName: "WhiteListRemoveIP",
			Handler:    _Limiter_WhiteListRemoveIP_Handler,
		},
		{
			MethodName: "BlackListAddIP",
			Handler:    _Limiter_BlackListAddIP_Handler,
		},
		{
			MethodName: "BlackListRemoveIP",
			Handler:    _Limiter_BlackListRemoveIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/limiter.proto",
}
